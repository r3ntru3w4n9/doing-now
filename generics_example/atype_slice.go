// Generated by: gen
// TypeWriter: slice
// Directive: +gen on AType

package main

// ATypeSlice is a slice of type AType. Use it where you would use []AType.
type ATypeSlice []AType

// Where returns a new ATypeSlice whose elements return true for func. See: http://clipperhouse.github.io/gen/#Where
func (rcv ATypeSlice) Where(fn func(AType) bool) (result ATypeSlice) {
	for _, v := range rcv {
		if fn(v) {
			result = append(result, v)
		}
	}
	return result
}

// Count gives the number elements of ATypeSlice that return true for the passed func. See: http://clipperhouse.github.io/gen/#Count
func (rcv ATypeSlice) Count(fn func(AType) bool) (result int) {
	for _, v := range rcv {
		if fn(v) {
			result++
		}
	}
	return
}

// GroupByString groups elements into a map keyed by string. See: http://clipperhouse.github.io/gen/#GroupBy
func (rcv ATypeSlice) GroupByString(fn func(AType) string) map[string]ATypeSlice {
	result := make(map[string]ATypeSlice)
	for _, v := range rcv {
		key := fn(v)
		result[key] = append(result[key], v)
	}
	return result
}
